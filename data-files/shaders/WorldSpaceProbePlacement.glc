#version 430
#extension GL_ARB_texture_query_lod : enable
#extension GL_ARB_compute_variable_group_size : enable
//#include "WorldSpaceProbe_Common.pix"
#define USED_PROBE_INDEX 0xFFFFFFFE
#define RADIANCE_PROBE_MAX_CLIPMAPS 6
#define INVALID_PROBE_INDEX 0xFFFFFFFF

layout( local_size_variable ) in;

struct RadianceProbeCoord
{
	vec3 ProbeMinCoord;
	vec3 ProbeMaxCoord;
	uint  ClipmapIndex;
};

layout(std430, binding=0) buffer adaptiveProbeWSPosition {
    vec4 adaptiveProbeWSPosData[];
};

layout(std430, binding=1) buffer adaptiveProbeSSPosition {
    vec4 adaptiveProbeSSPosData[];
};

layout(std430, binding=2) buffer adaptiveProbeNum{int adaptiveProbeNumData[];};

layout(std430, binding=3) buffer worldPositionToRadianceProbeCoordForMark {vec4 WorldPositionToRadianceProbeCoordForMark[];};

layout(std430, binding=4) buffer radianceProbeCoordToWorldPosition {vec4 RadianceProbeCoordToWorldPosition[];};

layout(r32ui) uniform uimage3D RadianceProbeIndirectionTexture;
layout(rgba32ui) uniform uimage2D testRadianceProbeIndirectionTexture;

uniform ivec2 ScreenProbeAtlasViewSize;
uniform ivec2 ScreenProbeViewSize;
uniform int ScreenProbeDownsampleFactor; 
uniform int NumUniformScreenProbes;
uniform int MaxNumAdaptiveProbes;


uniform int NumRadianceProbeClipmapsForMark;
uniform int RadianceProbeClipmapResolutionForMark;
uniform float InvClipmapFadeSizeForMark;

// Texture
uniform sampler2D   ws_positionTexture;
uniform sampler2D   depthTexture;
uniform sampler2D   ws_normalTexture;

ivec2 GetScreenProbeScreenPosition(uint ScreenProbeIndex)
{
	ivec2 ScreenProbeAtlasCoord = ivec2(ScreenProbeIndex % ScreenProbeViewSize.x, ScreenProbeIndex / ScreenProbeViewSize.x);
	ivec2 ScreenProbeScreenPosition = ivec2(ScreenProbeAtlasCoord * ScreenProbeDownsampleFactor);

	if (ScreenProbeIndex >= NumUniformScreenProbes)
	{
		ScreenProbeScreenPosition = ivec2(adaptiveProbeSSPosData[ScreenProbeIndex - NumUniformScreenProbes].rg);
	}

	return ScreenProbeScreenPosition;
}

int GetNumAdaptiveScreenProbes()
{
	return min(adaptiveProbeNumData[0], MaxNumAdaptiveProbes);
}

int GetNumScreenProbes()
{
	return NumUniformScreenProbes + GetNumAdaptiveScreenProbes();
}


bool IsValidRadianceCacheClipmapForMark(uint InClipmapIndex)
{
	return InClipmapIndex < NumRadianceProbeClipmapsForMark;
}


RadianceProbeCoord GetRadianceProbeCoord(vec3 WorldSpacePosition, float ClipmapDitherRandom)
{
	RadianceProbeCoord Out;
	Out.ClipmapIndex = NumRadianceProbeClipmapsForMark;

	uint ClipmapIndex = 0;
	for (; ClipmapIndex < NumRadianceProbeClipmapsForMark; ++ClipmapIndex)
	{
		vec3 ProbeCoordFloat = WorldSpacePosition * WorldPositionToRadianceProbeCoordForMark[ClipmapIndex].w + WorldPositionToRadianceProbeCoordForMark[ClipmapIndex].xyz;
		vec3 BottomEdgeFades = clamp((ProbeCoordFloat - .5f) * InvClipmapFadeSizeForMark, 0.0, 1.0);
		vec3 TopEdgeFades = clamp((vec3(RadianceProbeClipmapResolutionForMark) - .5f - ProbeCoordFloat) * InvClipmapFadeSizeForMark , 0.0, 1.0);
		float EdgeFade = min(min(BottomEdgeFades.x, min(BottomEdgeFades.y, BottomEdgeFades.z)), min(TopEdgeFades.x, min(TopEdgeFades.y, TopEdgeFades.z)));

		ivec3 ProbeMinCoord;
		ivec3 ProbeMaxCoord;

		ProbeMinCoord = ivec3(floor(ProbeCoordFloat - 0.5f));
		ProbeMaxCoord = ProbeMinCoord + 1;

		if (EdgeFade > ClipmapDitherRandom)
		{
			Out.ProbeMinCoord = ProbeMinCoord;
			Out.ProbeMaxCoord = ProbeMaxCoord;
			Out.ClipmapIndex  = ClipmapIndex;
			return Out;
		}
	}

	return Out;
}

uint GetRadianceProbeClipmapForMark(vec3 WorldSpacePosition, float ClipmapDitherRandom)
{
	RadianceProbeCoord Cell = GetRadianceProbeCoord(WorldSpacePosition, ClipmapDitherRandom);
	return Cell.ClipmapIndex;
}

uint GetRadianceProbeClipmapForMark(vec3 WorldSpacePosition)
{
	return GetRadianceProbeClipmapForMark(WorldSpacePosition, .01f);
}

void MarkProbeIndirectionTextureCoord(ivec3 ProbeCoord, uint ClipmapIndex)
{
	//ivec3 resolutionForMark = RadianceProbeClipmapResolutionForMark;
	if (all(greaterThanEqual(ProbeCoord, ivec3(0)) && lessThan(ProbeCoord , ivec3(RadianceProbeClipmapResolutionForMark))) && ClipmapIndex < NumRadianceProbeClipmapsForMark)
	//if ((ProbeCoord.x >= 0 && ProbeCoord.y >= 0 && ProbeCoord.z >= 0) && 
		//(ProbeCoord.x < resolutionForMark.x && ProbeCoord.y < resolutionForMark.y && ProbeCoord.z < resolutionForMark.z) && 
		//ClipmapIndex < NumRadianceProbeClipmapsForMark)
	{
		
		ivec3 IndirectionTextureCoord = ProbeCoord + ivec3(ClipmapIndex * RadianceProbeClipmapResolutionForMark, 0, 0);
		imageStore(RadianceProbeIndirectionTexture, IndirectionTextureCoord, uvec4(USED_PROBE_INDEX));
		ivec2 testCoord = ivec2(IndirectionTextureCoord.x, IndirectionTextureCoord.z * IndirectionTextureCoord.y + IndirectionTextureCoord.y);
		//ivec2 testCoord = ivec2(0,0);
		//ivec2 testCoord = ivec2(0,0);
		imageStore(testRadianceProbeIndirectionTexture, testCoord+ ivec2(0,0), uvec4(IndirectionTextureCoord.x));
		imageStore(testRadianceProbeIndirectionTexture, testCoord+ ivec2(1,0), uvec4(IndirectionTextureCoord.y));
		imageStore(testRadianceProbeIndirectionTexture, testCoord + ivec2(3,0), uvec4(IndirectionTextureCoord.z));

		imageStore(testRadianceProbeIndirectionTexture, testCoord+ ivec2(2,0), uvec4(ClipmapIndex));
		//imageStore(testRadianceProbeIndirectionTexture, testCoord + ivec2(3,0), uvec4(WorldPositionToRadianceProbeCoordForMark[3]));
		//imageStore(testRadianceProbeIndirectionTexture, testCoord, uvec4(RadianceProbeClipmapResolutionForMark));
	}
}

void MarkPositionUsedInIndirectionTexture(vec3 WorldPosition, uint ClipmapIndex)
{
	vec3 ProbeCoordFloat = WorldPosition * WorldPositionToRadianceProbeCoordForMark[ClipmapIndex].w + WorldPositionToRadianceProbeCoordForMark[ClipmapIndex].xyz;
	ivec3 BottomCornerProbeCoord = ivec3(floor(ProbeCoordFloat - 0.5f));

	
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + ivec3(0, 0, 0), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + ivec3(0, 0, 1), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + ivec3(0, 1, 0), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + ivec3(0, 1, 1), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + ivec3(1, 0, 0), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + ivec3(1, 0, 1), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + ivec3(1, 1, 0), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + ivec3(1, 1, 1), ClipmapIndex);
}


void MarkRadianceProbesUsedByScreenProbesCS()
{
	ivec2 ScreenProbeAtlasCoord = ivec2(gl_GlobalInvocationID.xy);
	uint ScreenProbeIndex = ScreenProbeAtlasCoord.y * ScreenProbeAtlasViewSize.x + ScreenProbeAtlasCoord.x;
	ivec2 screenCoord = GetScreenProbeScreenPosition(ScreenProbeIndex);

	if (ScreenProbeIndex < GetNumScreenProbes() && ScreenProbeAtlasCoord.x < ScreenProbeAtlasViewSize.x)
	{
		float SceneDepth = texelFetch(depthTexture, screenCoord, 0).r;
		vec3 WorldPosition = texelFetch(ws_positionTexture, screenCoord + ivec2(0.5, 0.5), 0).rgb;
		
		if (SceneDepth > 0)
		{
			uint ClipmapIndex = GetRadianceProbeClipmapForMark(WorldPosition);

			if (IsValidRadianceCacheClipmapForMark(ClipmapIndex))
			{
				//@todo - cull by screen size
				//@todo - cull probes too small for voxel tracing and too large for max trace distance
				MarkPositionUsedInIndirectionTexture(WorldPosition, ClipmapIndex);

			}
		}
	}
}

void main(){
	MarkRadianceProbesUsedByScreenProbesCS();
}
